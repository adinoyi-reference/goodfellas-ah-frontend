// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`components ProfileToolbar component should render as expected 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ProfileImageUploader
    canReset={false}
    imageRead={[MockFunction]}
    resetImage={[MockFunction]}
    type="follower"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        false,
        <input
          accept=".png, .jpg, .jpeg"
          id="uploader"
          onChange={[Function]}
          type="file"
        />,
        <label
          htmlFor="uploader"
        >
          <svg
            className="icon"
          >
            <use
              xlinkHref="icons.svg#camera"
            />
          </svg>
        </label>,
      ],
      "className": "profile-image profile-image-uploader centralizer",
      "style": Object {
        "backgroundImage": "linear-gradient(rgba(150, 150, 150, 0.4), rgba(150, 150, 150, 0.4)), url(https://res.cloudinary.com/drmmqcxkc/image/upload/v1541506955/user-placeholder.png)",
      },
    },
    "ref": null,
    "rendered": Array [
      false,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "accept": ".png, .jpg, .jpeg",
          "id": "uploader",
          "onChange": [Function],
          "type": "file",
        },
        "ref": null,
        "rendered": null,
        "type": "input",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <svg
            className="icon"
          >
            <use
              xlinkHref="icons.svg#camera"
            />
          </svg>,
          "htmlFor": "uploader",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <use
              xlinkHref="icons.svg#camera"
            />,
            "className": "icon",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "xlinkHref": "icons.svg#camera",
            },
            "ref": null,
            "rendered": null,
            "type": "use",
          },
          "type": "svg",
        },
        "type": "label",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          false,
          <input
            accept=".png, .jpg, .jpeg"
            id="uploader"
            onChange={[Function]}
            type="file"
          />,
          <label
            htmlFor="uploader"
          >
            <svg
              className="icon"
            >
              <use
                xlinkHref="icons.svg#camera"
              />
            </svg>
          </label>,
        ],
        "className": "profile-image profile-image-uploader centralizer",
        "style": Object {
          "backgroundImage": "linear-gradient(rgba(150, 150, 150, 0.4), rgba(150, 150, 150, 0.4)), url(https://res.cloudinary.com/drmmqcxkc/image/upload/v1541506955/user-placeholder.png)",
        },
      },
      "ref": null,
      "rendered": Array [
        false,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "accept": ".png, .jpg, .jpeg",
            "id": "uploader",
            "onChange": [Function],
            "type": "file",
          },
          "ref": null,
          "rendered": null,
          "type": "input",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <svg
              className="icon"
            >
              <use
                xlinkHref="icons.svg#camera"
              />
            </svg>,
            "htmlFor": "uploader",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <use
                xlinkHref="icons.svg#camera"
              />,
              "className": "icon",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "xlinkHref": "icons.svg#camera",
              },
              "ref": null,
              "rendered": null,
              "type": "use",
            },
            "type": "svg",
          },
          "type": "label",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`components ProfileToolbar component should render as expected 2`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ProfileImageUploader
    canReset={true}
    imageRead={[MockFunction]}
    resetImage={[MockFunction]}
    type="follower"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <span
          className="profile-image-uploader_cancel hoverable centralizer"
          onClick={[MockFunction]}
        >
          x
        </span>,
        <input
          accept=".png, .jpg, .jpeg"
          id="uploader"
          onChange={[Function]}
          type="file"
        />,
        <label
          htmlFor="uploader"
        >
          <svg
            className="icon"
          >
            <use
              xlinkHref="icons.svg#camera"
            />
          </svg>
        </label>,
      ],
      "className": "profile-image profile-image-uploader centralizer",
      "style": Object {
        "backgroundImage": "linear-gradient(rgba(150, 150, 150, 0.4), rgba(150, 150, 150, 0.4)), url(https://res.cloudinary.com/drmmqcxkc/image/upload/v1541506955/user-placeholder.png)",
      },
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "x",
          "className": "profile-image-uploader_cancel hoverable centralizer",
          "onClick": [MockFunction],
        },
        "ref": null,
        "rendered": "x",
        "type": "span",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "accept": ".png, .jpg, .jpeg",
          "id": "uploader",
          "onChange": [Function],
          "type": "file",
        },
        "ref": null,
        "rendered": null,
        "type": "input",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <svg
            className="icon"
          >
            <use
              xlinkHref="icons.svg#camera"
            />
          </svg>,
          "htmlFor": "uploader",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <use
              xlinkHref="icons.svg#camera"
            />,
            "className": "icon",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "xlinkHref": "icons.svg#camera",
            },
            "ref": null,
            "rendered": null,
            "type": "use",
          },
          "type": "svg",
        },
        "type": "label",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <span
            className="profile-image-uploader_cancel hoverable centralizer"
            onClick={[MockFunction]}
          >
            x
          </span>,
          <input
            accept=".png, .jpg, .jpeg"
            id="uploader"
            onChange={[Function]}
            type="file"
          />,
          <label
            htmlFor="uploader"
          >
            <svg
              className="icon"
            >
              <use
                xlinkHref="icons.svg#camera"
              />
            </svg>
          </label>,
        ],
        "className": "profile-image profile-image-uploader centralizer",
        "style": Object {
          "backgroundImage": "linear-gradient(rgba(150, 150, 150, 0.4), rgba(150, 150, 150, 0.4)), url(https://res.cloudinary.com/drmmqcxkc/image/upload/v1541506955/user-placeholder.png)",
        },
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "x",
            "className": "profile-image-uploader_cancel hoverable centralizer",
            "onClick": [MockFunction],
          },
          "ref": null,
          "rendered": "x",
          "type": "span",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "accept": ".png, .jpg, .jpeg",
            "id": "uploader",
            "onChange": [Function],
            "type": "file",
          },
          "ref": null,
          "rendered": null,
          "type": "input",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <svg
              className="icon"
            >
              <use
                xlinkHref="icons.svg#camera"
              />
            </svg>,
            "htmlFor": "uploader",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <use
                xlinkHref="icons.svg#camera"
              />,
              "className": "icon",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "xlinkHref": "icons.svg#camera",
              },
              "ref": null,
              "rendered": null,
              "type": "use",
            },
            "type": "svg",
          },
          "type": "label",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
